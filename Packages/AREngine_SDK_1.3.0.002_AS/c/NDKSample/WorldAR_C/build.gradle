apply plugin: 'com.android.application'

/*
The arcore aar library contains the native shared libraries.  These are
extracted before building to a temporary directory.
 */
def arcore_libpath = "${buildDir}/arcore-native"
def arengine_libpath = "${projectDir}/src/main/jniLibs/"
// Create a configuration to mark which aars to extract .so files from
configurations { natives }

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.huawei.arengine.examples.c.helloar"

        // 24 is the minimum since ARCore only works with 24 and higher.
        minSdkVersion 26
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11", "-Wall"
                arguments "-DANDROID_STL=c++_static",
                        "-DARCORE_LIBPATH=${arcore_libpath}/jni",
                        "-DARENGINE_INCLUDE=${project.rootDir}/NDK/cpp",
                        "-DARENGINE_LIBPATH=${arengine_libpath}/jni"
            }
        }
        ndk {
//            abiFilters "arm64-v8a"
            abiFilters "armeabi-v7a"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}


dependencies {
    // ARCore library
    compile fileTree(include: ['*.aar'], dir: 'libs')
    implementation 'com.google.ar:core:1.2.0'
    natives 'com.google.ar:core:1.2.0'
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support:design:27.0.2'
}

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibraries() {
    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arcore_libpath
                include "jni/**/*"
            }
        }
    }
}

task extractNativeLibrariesArEngine() {
    def listNames = project.fileTree('libs')
    if(!listNames.isEmpty()) {
        def aarPath = listNames.first().toPath()
        doFirst {
            println aarPath
            copy {
                from zipTree(aarPath)
                into arengine_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
        task.dependsOn(extractNativeLibrariesArEngine)
    }
}

